/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OrganigramRouteImport } from './routes/organigram'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AlgorithmsIndexRouteImport } from './routes/algorithms/index'
import { Route as AlgorithmsSortingRouteImport } from './routes/algorithms/sorting'
import { Route as AlgorithmsSearchingRouteImport } from './routes/algorithms/searching'

const OrganigramRoute = OrganigramRouteImport.update({
  id: '/organigram',
  path: '/organigram',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlgorithmsIndexRoute = AlgorithmsIndexRouteImport.update({
  id: '/algorithms/',
  path: '/algorithms/',
  getParentRoute: () => rootRouteImport,
} as any)
const AlgorithmsSortingRoute = AlgorithmsSortingRouteImport.update({
  id: '/algorithms/sorting',
  path: '/algorithms/sorting',
  getParentRoute: () => rootRouteImport,
} as any)
const AlgorithmsSearchingRoute = AlgorithmsSearchingRouteImport.update({
  id: '/algorithms/searching',
  path: '/algorithms/searching',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/organigram': typeof OrganigramRoute
  '/algorithms/searching': typeof AlgorithmsSearchingRoute
  '/algorithms/sorting': typeof AlgorithmsSortingRoute
  '/algorithms': typeof AlgorithmsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/organigram': typeof OrganigramRoute
  '/algorithms/searching': typeof AlgorithmsSearchingRoute
  '/algorithms/sorting': typeof AlgorithmsSortingRoute
  '/algorithms': typeof AlgorithmsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/organigram': typeof OrganigramRoute
  '/algorithms/searching': typeof AlgorithmsSearchingRoute
  '/algorithms/sorting': typeof AlgorithmsSortingRoute
  '/algorithms/': typeof AlgorithmsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/organigram'
    | '/algorithms/searching'
    | '/algorithms/sorting'
    | '/algorithms'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/organigram'
    | '/algorithms/searching'
    | '/algorithms/sorting'
    | '/algorithms'
  id:
    | '__root__'
    | '/'
    | '/organigram'
    | '/algorithms/searching'
    | '/algorithms/sorting'
    | '/algorithms/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrganigramRoute: typeof OrganigramRoute
  AlgorithmsSearchingRoute: typeof AlgorithmsSearchingRoute
  AlgorithmsSortingRoute: typeof AlgorithmsSortingRoute
  AlgorithmsIndexRoute: typeof AlgorithmsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/organigram': {
      id: '/organigram'
      path: '/organigram'
      fullPath: '/organigram'
      preLoaderRoute: typeof OrganigramRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/algorithms/': {
      id: '/algorithms/'
      path: '/algorithms'
      fullPath: '/algorithms'
      preLoaderRoute: typeof AlgorithmsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/algorithms/sorting': {
      id: '/algorithms/sorting'
      path: '/algorithms/sorting'
      fullPath: '/algorithms/sorting'
      preLoaderRoute: typeof AlgorithmsSortingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/algorithms/searching': {
      id: '/algorithms/searching'
      path: '/algorithms/searching'
      fullPath: '/algorithms/searching'
      preLoaderRoute: typeof AlgorithmsSearchingRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrganigramRoute: OrganigramRoute,
  AlgorithmsSearchingRoute: AlgorithmsSearchingRoute,
  AlgorithmsSortingRoute: AlgorithmsSortingRoute,
  AlgorithmsIndexRoute: AlgorithmsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
